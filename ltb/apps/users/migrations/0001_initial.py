# Generated by Django 3.2.23 on 2024-09-13 07:46

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': '城市列表',
                'verbose_name_plural': '城市列表',
                'db_table': 'tb_citys',
            },
        ),
        migrations.CreateModel(
            name='Hotel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(default='未知地', max_length=50)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('location', models.CharField(max_length=255)),
                ('distance_to_city_center', models.DecimalField(decimal_places=2, max_digits=5)),
                ('review_count', models.IntegerField()),
                ('rating', models.DecimalField(decimal_places=2, max_digits=3)),
                ('hotel_img', models.CharField(default='http://127.0.0.1:8080/images/hotel/default.jpg', max_length=200)),
                ('level', models.CharField(default='未知', max_length=6, null=True)),
                ('detail_location', models.CharField(max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Roomtype',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('size', models.CharField(max_length=200, null=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('has_window', models.BooleanField(default=False)),
                ('has_breakfast', models.BooleanField(default=False)),
                ('room_img', models.CharField(default='http://127.0.0.1:8080/images/room/default.jpg', max_length=200)),
                ('room_capacity', models.PositiveIntegerField(default=1)),
                ('hotel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.hotel', verbose_name='所属酒店')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(max_length=15, unique=True)),
                ('mobile', models.CharField(max_length=11, null=True, unique=True)),
                ('profile', models.CharField(default='http://127.0.0.1:8080/images/profile/default.jpg', max_length=200)),
                ('email', models.EmailField(max_length=255, null=True, unique=True)),
                ('bio', models.TextField(blank=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
